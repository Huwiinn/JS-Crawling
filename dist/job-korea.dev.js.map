{"version":3,"sources":["job-korea.js"],"names":["axios","require","cheerio","nodemailer","config","path","getHTML","keyword","get","html","data","console","log","parsing","page","$","load","jobs","$jobList","each","idx","node","title","find","text","trim","company","exp","edu","contract","region","date","includes","push","getJob","crawlingJobs","h","forEach","job","emailData","from","to","subject","join","sendMail","err","info"],"mappings":"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","sourcesContent":["const axios = require(\"axios\");\r\nconst cheerio = require('cheerio');\r\nconst nodemailer = require(\"nodemailer\");\r\nrequire(\"dotenv\").config ({path : \"nodemailer/.env\"});\r\n\r\n\r\n\r\nconst getHTML = async (keyword) => {    \r\n    try {\r\n        const html = (await axios.get(`https://www.jobkorea.co.kr/Search/?stext=${(keyword)}&tabType=recruit&Page_No=1`)).data\r\n\r\n        return html;\r\n    } catch (err) {\r\n        console.log(\"err : \", err)\r\n    }\r\n}\r\n\r\nconst parsing = async (page) => {\r\n\r\n    const $ = cheerio.load(page);\r\n    \r\n    // 읽어들인 구인공고 목록\r\n    const jobs = [];\r\n    const $jobList = $(\".post\")\r\n    \r\n    try {\r\n\r\n    $jobList.each((idx, node) => {\r\n        const title = $(node).find(\".title:eq(0)\").text().trim();\r\n        const company = $(node).find(\".name:eq(0)\").text().trim();\r\n        const exp = $(node).find(\".exp:eq(0)\").text().trim();\r\n        const edu = $(node).find(\".edu:eq(0)\").text().trim();\r\n        const contract = $(node).find(\"span:eq(2)\").text().trim();\r\n        const region = $(node).find(\".loc.long:eq(0)\").text().trim();\r\n        const date = $(node).find(\".date:eq(0)\").text().trim();\r\n\r\n\r\n        if (exp.includes(\"신입\") || exp.includes(\"경력무관\") ) {\r\n             jobs.push({\r\n            title, company, exp, edu, contract, region, date\r\n        }) \r\n        }\r\n\r\n       \r\n    })\r\n        return jobs\r\n        \r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n    \r\n}\r\n\r\nconst getJob = async (keyword) => {\r\n    const html = await getHTML(keyword);\r\n    const jobs = await parsing(html)\r\n    console.log(jobs)\r\n    return jobs;\r\n}\r\n\r\nconst crawlingJobs = async (keyword) => {\r\n    const jobs = await getJob(\"프론트엔드\")\r\n    \r\n    const h = [];\r\n    \r\n    h.push(`<table style=\"border:1px solid #000; border-collapse:collapse\">`)\r\n    h.push(`<thead>`)\r\n    h.push(`<tr>`)\r\n    h.push(`<th>구인제목</th>`)\r\n    h.push(`<th>회사명</th>`)\r\n    h.push(`<th>경력</th>`)\r\n    h.push(`<th>학력</th>`)\r\n    h.push(`<th>정규직 여부</th>`)\r\n    h.push(`<th>지역</th>`)\r\n    h.push(`<th>구인 마감일</th>`)\r\n    h.push(`</tr>`)\r\n    h.push(`</thead>`)\r\n    h.push(`<tbody>`)\r\n    jobs.forEach(job => {\r\n        h.push(`<tr>`)\r\n        h.push(`<td>${job.title}</td>`)\r\n        h.push(`<td>${job.company}</td>`)\r\n        h.push(`<td>${job.exp}</td>`)\r\n        h.push(`<td>${job.edu}</td>`)\r\n        h.push(`<td>${job.contract}</td>`)\r\n        h.push(`<td>${job.region}</td>`)\r\n        h.push(`<td>${job.date}</td>`)\r\n        h.push(`</tr>`)\r\n    })\r\n    h.push(`</tbody>`)\r\n    h.push(`</table>`)\r\n\r\n    const emailData = {\r\n        from: \"gnldls8406@naver.com\",\r\n        to: \"gnldls8406@gmail.com\",\r\n        subject: \"프론트엔드 구인 회사 정보\",\r\n        html : h.join(\"\")\r\n    }\r\n\r\n    await nodemailer.sendMail(emailData, (err, info) => {\r\n        console.log(err)\r\n    });\r\n}\r\n\r\ncrawlingJobs(\"프론트엔드\");\r\n"],"file":"job-korea.dev.js"}